# -*- coding: utf-8 -*-
"""mySort_test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QpWZWsyh7En4xVvJXfTrWkuDg-YcOtoK
"""

"""
If you are using Python on your OS, you don't need to mount your Google Drive.
You can mount your Google Drive to access files stored there. In Colab, run the
following code:
"""
from google.colab import drive
drive.mount('/content/drive')
"""
This will prompt you to authenticate and allow access to your Google Drive.
"""

"""
We use `time` to meausre the time taken by each function.
"""
import time

"""
You can use Python's `ctypes` library to interface with the C shared library.
This allows you to call functions from the shared library in Python.

After compiling your C source code and creating `libmysort.so` shared lib with:
`gcc -fPIC -shared -o libmysort.so mysort.c`,
We will be able to load the shared library named `libmysort.so` in Python using
`ctypes.CDLL` function.

Ensure the shared library is in the same directory as the Python script or in a
location where it can be found by the loader.
"""
import ctypes

"""
We use `numpy` library to create a manipulate multidimensional arrays.
"""
import numpy as np

"""
You can share the memory between Python and C directly using the ndpointer class
from the numpy.ctypeslib module. This avoids copying the data and instead passes
a pointer to the NumPy arrayâ€™s underlying memory buffer. We will use `ndpointer`
to specify the data type of inputs to the functions.
"""
from numpy.ctypeslib import ndpointer

"""Path to the shared library on Google Drive. Mine is in this directory, you can
change it based on your needs. If you are using your own OS, not colab, just use
'./libmysort.so' if it is in the corrent directory.
"""
lib_path = '/content/drive/MyDrive/libmysort.so'

# Load the shared library
mySortLib = ctypes.CDLL(lib_path)

# Define input argument types without conversion using ndpointer
mySortLib.bubbleSort.argtypes = [ndpointer(ctypes.c_int, flags="C_CONTIGUOUS"), ctypes.c_int]
mySortLib.bubbleSort.restype = None

"""
CODE: do the same for insertion sort, merge sort, heap sort, and counting sort.
"""
mySortLib.insertionSort.argtypes = [ndpointer(ctypes.c_int, flags="C_CONTIGUOUS"), ctypes.c_int]
mySortLib.insertionSort.restype = None

# Merge sort takes an extra number input
mySortLib.mergeSort.argtypes = [ndpointer(ctypes.c_int, flags="C_CONTIGUOUS"), ctypes.c_int, ctypes.c_int]
mySortLib.mergeSort.restype = None

mySortLib.heapSort.argtypes = [ndpointer(ctypes.c_int, flags="C_CONTIGUOUS"), ctypes.c_int]
mySortLib.heapSort.restype = None

mySortLib.countingSort.argtypes = [ndpointer(ctypes.c_int, flags="C_CONTIGUOUS"), ctypes.c_int]
mySortLib.countingSort.restype = None

# Running a simple test
arr1 = np.array([64, -134, -5, 0, 25, 12, 22, 11, 90], dtype=np.int32)
n = len(arr1)
print("Original array:", arr1)

arr0 = np.copy(arr1)
mySortLib.bubbleSort(arr0, n)
print("Sorted array using Bubble Sort:", arr0)

arr0 = np.copy(arr1)
mySortLib.insertionSort(arr0, n)
print("Sorted array using Insertion Sort:", arr0)

arr0 = np.copy(arr1)
mySortLib.mergeSort(arr0, 0, n-1)
print("Sorted array using Merge Sort:", arr0)

arr0 = np.copy(arr1)
mySortLib.heapSort(arr0, n)
print("Sorted array using Heap Sort:", arr0)

arr0 = np.copy(arr1)
mySortLib.countingSort(arr0, n)
print("Sorted array using Counting Sort:", arr0)

# Creating a large test case
arr = np.random.choice(np.arange(-1000000, 1000000, dtype=np.int32), size=500000, replace=False)
n = len(arr)
print("Original array:", arr)

arr_copy = np.copy(arr)
start = time.time()
mySortLib.bubbleSort(arr_copy, n)
end = time.time()
print("Sorted array using Bubble Sort:", arr_copy)
print(f"Time to convert: {end - start} seconds")

"""
CODE: do the same for insertion sort, merge sort, heap sort, and counting sort.
"""
arr_copy = np.copy(arr)
start = time.time()
mySortLib.insertionSort(arr_copy, n)
end = time.time()
print("Sorted array using Insertion Sort:", arr_copy)
print(f"Time to convert: {end - start} seconds")

arr_copy = np.copy(arr)
start = time.time()
mySortLib.mergeSort(arr_copy, 0, n-1)
end = time.time()
print("Sorted array using Merge Sort:", arr_copy)
print(f"Time to convert: {end - start} seconds")

arr_copy = np.copy(arr)
start = time.time()
mySortLib.heapSort(arr_copy, n)
end = time.time()
print("Sorted array using Heap Sort:", arr_copy)
print(f"Time to convert: {end - start} seconds")

arr_copy = np.copy(arr)
start = time.time()
mySortLib.countingSort(arr_copy, n)
end = time.time()
print("Sorted array using Counting Sort:", arr_copy)
print(f"Time to convert: {end - start} seconds")

# Compare with built-in sort
start = time.time()
sorted_arr = sorted(arr)  # Python's built-in sort
end = time.time()
print("Sorted array with built-in sort:", sorted_arr)
print("Time taken by built-in sort:", end - start, "seconds")

# You can also use NumPy's np.sort(), which is highly optimized:
start = time.time()
np_sorted_arr = np.sort(arr)  # NumPy's optimized sort
end = time.time()
print("Sorted array using Numpy sort:", np_sorted_arr)
print("Time taken by NumPy sort:", end - start, "seconds")

